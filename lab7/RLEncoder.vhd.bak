library work;
use work.all;
library ieee; 
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
USE ieee.std_logic_arith.ALL;
USE ieee.std_logic_unsigned.ALL;

type memory is array (integer range <>) of std_logic_vector(7 downto 0);

entity RLEncoder is
	port ( clk, rst : in std_logic;
	input : in std_logic_vector(7 downto 0);
	output: out std_logic_vector(7 downto 0);
	valid: out std_logic);
end entity;

architecture Encode of RLEncoder is


component FourbitUpCount is
	port ( clk, rst : in std_logic;
	count: out std_logic_vector (3 downto 0));
end component;

component UpDownCounter is
	port ( clk, rst : in std_logic; up: in std_logic;
	count: out std_logic_vector (6 downto 0));
end component;

component DFlipFlop is
	port (clk, rst, d: in std_logic; q: out std_logic);
end component;

signal neg_clk: std_logic;

signal current_char : std_logic_vector(7 downto 0) := "00000000"; -- store the current character
--signal next_state : std_logic_vector(6 downto 0) := "0000001"; -- store the next state

signal cnt: std_logic_vector(3 downto 0); -- store the count of current character
signal reset: std_logic; -- used to reset the count if the input is not same as stored character

signal buff: memory(96 downto 0);  -- buffer for the output
signal index: integer range 0 to 96; -- store the index till which the buffer is filled
 
begin
	neg_clk <= not clk;

	FOR i IN 0 to 7 GENERATE   -- Store the current character in D flip flops. The state changes at the falling edge of clock
		char: DFlipFlop PORT MAP (neg_clk,rst,input(i),current_char(i));
	END GENERATE;	
	
	count: FourbitUpCount PORT MAP(clk, reset, cnt); 
	
	
	process(clk)
	begin
		if(rising_edge(clk)) then
			if( current_char = input and unsigned(cnt) < 15) then -- no need to put the current character in buffer
				reset <= rst;
			else
				reset <= '1';
				if(unsigned(current_char) = 27) then -- if the current char is ESC
					
				end if
			end if;
		end if;
	end
end;
